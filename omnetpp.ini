[General]
network = sim
# radio and radioMedium
**.radio.centerFrequency = 2.45GHz
**.radio.bandwidth = 2.8MHz

**.radio.transmitter.bitrate = 19200 bps
**.radio.transmitter.headerLength = 8b
**.radio.transmitter.preambleDuration = 0.0001s
**.radio.transmitter.power = 2.24mW

**.radio.receiver.energyDetection = -90dBm
**.radio.receiver.sensitivity = -100dBm
**.radio.receiver.snirThreshold = -8dB

*.radioMedium.backgroundNoise.power = -110dBm

#abstract-config = true (requires omnet 7)

**.arp.typename = "GlobalArp"
**.netmaskRoutes = ""
*.radioMedium.backgroundNoise.power = -110dBm
*.configurator.config = xmldoc("startopology.xml")
*.configurator.addStaticRoutes = false

# app configuration
.sensor.numApps = 1
.sensor.app[*].typename = "UdpBasicApp"
.sensor.app[*].destAddresses = "basestation"
.sensor.app[*].destPort = 1000
.sensor.app[*].sendInterval = 1s
.sensor.app[*].startTime = uniform(0s,1s)
.sensor.app[*].messageLength = 10Byte
.sensor.app[*].packetName = "SensorData"

*.basestation.numApps = 2
*.basestation.app[0].typename = "UdpBasicApp"
*.basestation.app[0].destAddresses = "drone1 drone2"
*.basestation.app[0].destPort = 1000
*.basestation.app[0].sendInterval = 0.125s
*.basestation.app[0].startTime = exponential(1s)
*.basestation.app[0].messageLength = 10Byte
*.basestation.app[0].packetName = "ControlData"

*.basestation.app[1].typename = "UdpSink"
*.basestation.app[1].localPort = 1000

.drone.numApps = 1
.drone.app[0].typename = "UdpSink"
.drone.app[0].localPort = 1000

# routing table visualization
.visualizer..routingTableVisualizer[0].displayRoutingTables = false
.visualizer..routingTableVisualizer[0].displayRoutesIndividually = true
.visualizer..routingTableVisualizer[0].lineShift = 0
.visualizer..routingTableVisualizer[0].displayLabels = false

# interface table visualization
.visualizer..interfaceTableVisualizer[0].displayInterfaceTables = true

#mobility

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 5000m
**.constraintAreaMaxY = 5000m
**.constraintAreaMaxZ = 5000m

#drone
#.drone[].mobility.typename = "LinearMobility"
#.drones[].mobility.coordinateSystemModule = "coordinateSystem"
#**.mobility.initFromDisplayString = false
#.drones[].mobility.speed = uniform(10mps,20mps)
#**.mobility.speed = 40mps
#.drone[].mobility.speed = 100mps
#.drone[].mobility.coordinateSystemModule = "coordinateSystem" # Empty if the drone should follow Euclidean coordinates or "coordinateSystem" if it should follow coordinates
#.drone[].mobility.waypointFile = "voo_ar.waypoints"
#.drone[].mobility.waypointProximity = 1m
#**.updateInterval = 1s # test with 0s too, and let getCurrentPosition update the display string from a test module
#**.mobility.initFromDisplayString = false
#**.mobility.speed = uniform(1.4mps, 2.0mps, 1)
#**.mobility.waitTime = uniform(60s, 1800s, 1)

# data link visualization
.visualizer..numDataLinkVisualizers = 2
.visualizer..dataLinkVisualizer[*].displayLinks = true
.visualizer..dataLinkVisualizer[0].nodeFilter = "sensor* or basestation"
.visualizer..dataLinkVisualizer[1].*Color = "purple"
.visualizer..dataLinkVisualizer[1].*Color = "blue"
.visualizer..dataLinkVisualizer[1].nodeFilter = "drone* or basestation"

# statistic visualization
.visualizer..numStatisticVisualizers = 2
.visualizer..statisticVisualizer[*].zIndex = 1

.visualizer..statisticVisualizer[0].displayStatistics = true
.visualizer..statisticVisualizer[0].signalName = "packetSent"
.visualizer..statisticVisualizer[0].statisticExpression = "count"
.visualizer..statisticVisualizer[0].sourceFilter = "*.basestation.udp OR *.sensor*.udp"
.visualizer..statisticVisualizer[0].format = "sent: %v pks"

.visualizer..statisticVisualizer[1].displayStatistics = true
.visualizer..statisticVisualizer[1].signalName = "packetReceived"
.visualizer..statisticVisualizer[1].statisticExpression = "count"
.visualizer..statisticVisualizer[1].sourceFilter = "*.basestation.udp OR *.drone*.udp"
.visualizer..statisticVisualizer[1].format = "rcvd: %v pks"

[Config Ieee802154Power]
#extends = simpower
sim-time-limit = 100s

**.energyStorage.residualEnergyCapacity.result-recording-modes = +last
